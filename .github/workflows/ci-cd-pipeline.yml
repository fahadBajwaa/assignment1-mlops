name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - feature-frontend
      - feature-api
      - feature-model-training

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: |
          python -m unittest discover

  build-frontend:
    name: Build and Test Frontend Environment
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/feature-frontend'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  build-api:
    name: Build and Test API Environment
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/feature-api'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  build-model:
    name: Build and Test Model Training Environment
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/feature-model-training'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  deploy-dev:
    name: Deploy to Vercel (Development)
    runs-on: ubuntu-latest
    needs: build-frontend
    if: github.ref == 'refs/heads/feature-frontend'
    steps:
      - name: Deploy to Vercel
        run: |
          npm install -g vercel
          vercel --prod --env VERCEL_ENV=development --token ${{ secrets.VERCEL_TOKEN }}

  deploy-api:
    name: Deploy to Vercel (API)
    runs-on: ubuntu-latest
    needs: build-api
    if: github.ref == 'refs/heads/feature-api'
    steps:
      - name: Deploy to Vercel
        run: |
          npm install -g vercel
          vercel --prod --env VERCEL_ENV=staging --token ${{ secrets.VERCEL_TOKEN }}

  deploy-model:
    name: Deploy to Vercel (Model Training)
    runs-on: ubuntu-latest
    needs: build-model
    if: github.ref == 'refs/heads/feature-model-training'
    steps:
      - name: Deploy to Vercel
        run: |
          npm install -g vercel
          vercel --prod --env VERCEL_ENV=staging --token ${{ secrets.VERCEL_TOKEN }}

  deploy-prod:
    name: Deploy to Vercel (Production)
    runs-on: ubuntu-latest
    needs: [build-frontend, build-api, build-model]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to Vercel
        run: |
          npm install -g vercel
          vercel --prod --env VERCEL_ENV=production --token ${{ secrets.VERCEL_TOKEN }}
